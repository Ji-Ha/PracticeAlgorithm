package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static char[][] wheels = new char[4][8];
    static boolean[] visited;
    static int K, ans = 0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        for (int i = 0; i < 4; i++) {
            String line = br.readLine();
            for (int j = 0; j < 8; j++)
                wheels[i][j] = line.charAt(j);
        }
        K = Integer.parseInt(br.readLine());

        int u, v;
        for (int i = 0; i < K; i++) {
            st = new StringTokenizer(br.readLine());
            u = Integer.parseInt(st.nextToken());
            v = Integer.parseInt(st.nextToken());
            visited = new boolean[4];
            turn(u - 1, v);
        }

        for (int i = 0; i < 4; i++)
            ans += (wheels[i][0] - '0') * Math.pow(2, i);

        System.out.println(ans);
    }

    static void turn(int w, int d) {
        visited[w] = true;
        if (d == 1)
            clock(w);
        if (d == -1)
            unClock(w);

        for(char a : wheels[w])
            System.out.print(a);
        System.out.println();


        if (w == 0) {
            if (!visited[w + 1] && wheels[w][2] != wheels[w + 1][6]) turn(w + 1, d * -1);
        } else if (w == 3) {
            if (!visited[w - 1] && wheels[w][6] != wheels[w - 1][2]) turn(w - 1, d * -1);
        } else {
            if (!visited[w + 1] && wheels[w][2] != wheels[w + 1][6]) turn(w + 1, d * -1);
            if (!visited[w - 1] && wheels[w][6] != wheels[w - 1][2]) turn(w - 1, d * -1);
        }
    }

    static void clock(int w) {
        char last = wheels[w][7];
        for (int i = 7; i > 0; i--)
            wheels[w][i] = wheels[w][i - 1];
        wheels[w][0] = last;
    }

    static void unClock(int w) {
        char first = wheels[w][0];
        for (int i = 0; i < 7; i++)
            wheels[w][i] = wheels[w][i + 1];
        wheels[w][7] = first;
    }
}
