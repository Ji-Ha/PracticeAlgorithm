package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int N, M, ans = Integer.MIN_VALUE;
    static char[][] map;
    static boolean[][] visited;
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new char[N][M];

        for(int i = 0; i < N; i++){
            String line = br.readLine();
            for(int j = 0; j < M; j++)
                map[i][j] = line.charAt(j);
        }

        for(int i = 0; i < N; i++) {
            for(int j = 0; j < M; j++) {
                if(map[i][j] == 'L'){
                    visited = new boolean[N][M];
                    BFS(i, j);
                }
            }
        }
        System.out.println(ans);
    }

    public static void BFS(int x, int y) {
        Queue<Pointer> q = new LinkedList<>();
        q.add(new Pointer(x, y, 0));

        while(!q.isEmpty()) {
            Pointer p = q.poll();
            visited[p.x][p.y] = true;

            for(int i = 0; i < 4; i++) {
                int nx = p.x + dx[i];
                int ny = p.y + dy[i];
                if(nx >= 0 && ny >= 0 && nx < N && ny < M && !visited[nx][ny] && map[nx][ny] == 'L') {
                    visited[nx][ny] = true;
                    q.add(new Pointer(nx, ny, p.d + 1));
                    ans = Math.max(ans ,p.d + 1);
                }
            }
        }
    }

    public static class Pointer{
        int x, y, d;
        Pointer(int x, int y, int d) {
            this.x = x;
            this.y = y;
            this.d = d;
        }
    }
}
