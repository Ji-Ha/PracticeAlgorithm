package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int N, M;
    static ArrayList<ArrayList<Integer>> graph;
    static boolean[] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int t = 1;

        while(true){
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());
            if(N == 0 && M == 0) break;

            graph = new ArrayList<>();
            for(int i = 0; i <= N; i++)
                graph.add(new ArrayList<>());

            for(int i = 0; i < M; i++){
                st = new StringTokenizer(br.readLine());
                int u = Integer.parseInt(st.nextToken());
                int v = Integer.parseInt(st.nextToken());
                graph.get(u).add(v);
                graph.get(v).add(u);
            }

            visited = new boolean[N + 1];

            int res = 0;
            for(int i = 1; i <= N; i++){
                if(!visited[i]) res += checkTree(i);
            }

            if(res == 0)
                System.out.println("Case " + t++ + ": No trees.");
            else if(res == 1)
                System.out.println("Case " + t++ + ": There is one tree.");
            else
                System.out.println("Case " + t++ + ": A forest of " + res + " trees.");
        }
    }

    static int checkTree(int start){
        Queue<Integer> q = new LinkedList<>();
        q.offer(start);
        int node = 0, edge = 0;

        while(!q.isEmpty()){
            int cur = q.poll();
            node += 1;
            visited[cur] = true;

            for(int next : graph.get(cur)){
                edge += 1;
                if(!visited[next]) q.offer(next);
            }
        }
        return (edge / 2) + 1 == node ? 1 : 0;
    }
}
