package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int N, M, K;
    static long[] arr, tree;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        arr = new long[N + 1];
        for(int i = 1; i <= N; i++)
            arr[i] = Integer.parseInt(br.readLine());

        tree = new long[N * 4];
        build(1, N, 1);

        int a, b;
        long c;
        for(int i = 0; i < M + K; i++) {
            st = new StringTokenizer(br.readLine());
            a = Integer.parseInt(st.nextToken());
            b = Integer.parseInt(st.nextToken());
            c = Long.parseLong(st.nextToken());
            if(a == 1) {
                long dif = c - arr[b];
                arr[b] = c;
                update(1, 1, N, b, dif);
            }

            if(a == 2)
                System.out.println(sum(1, 1, N, b, c));
        }
    }

    public static long build(int start, int end, int node) {
        if(start == end) return tree[node] = arr[start];

        int mid = (start + end) / 2;

        return tree[node] = build(start, mid, node * 2) + build(mid + 1, end, node * 2 + 1);
    }

    public static long sum(int node, int start, int end, int left, long right) {
        if(left > end || right < start)
            return 0;
        if(left <= start && end <= right)
            return tree[node];

        int mid = (start + end) / 2;
        return sum(node * 2, start, mid, left, right) + sum(node * 2 + 1, mid + 1, end, left, right);
    }

    public static void update(int node, int start, int end, int idx, long dif) {
        if(idx < start  || idx > end) return ;
        tree[node] = tree[node] + dif;
        int mid = (start + end) / 2;
        if(start != end) {
            update(node * 2, start, mid, idx, dif);
            update(node * 2 + 1, mid + 1, end, idx, dif);
        }
    }
}
