{\rtf1\ansi\ansicpg949\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red133\green96\blue154;\red254\green187\blue91;\red86\green132\blue173;\red173\green169\blue32;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c67843\c66275\c12549;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 package \cf4 coding_test\cf2 ;\
\
import \cf4 java.io.BufferedReader\cf2 ;\
import \cf4 java.io.IOException\cf2 ;\
import \cf4 java.io.InputStreamReader\cf2 ;\
import \cf4 java.util.Arrays\cf2 ;\
import \cf4 java.util.Comparator\cf2 ;\
import \cf4 java.util.PriorityQueue\cf2 ;\
import \cf4 java.util.StringTokenizer\cf2 ;\
\
public class \cf4 Main\{\
    \cf2 static int 
\f1\i \cf5 N
\f0\i0 \cf2 ;\
    static \cf4 PriorityQueue<Integer> 
\f1\i \cf5 pq 
\f0\i0 \cf4 = \cf2 new \cf4 PriorityQueue<>()\cf2 ;\
    static int\cf4 [][] 
\f1\i \cf5 input
\f0\i0 \cf2 ;\
\
    public static void \cf6 main\cf4 (String[] args) \cf2 throws \cf4 IOException \{\
        BufferedReader br = \cf2 new \cf4 BufferedReader(\cf2 new \cf4 InputStreamReader(System.
\f1\i \cf5 in
\f0\i0 \cf4 ))\cf2 ;\
        \cf4 StringTokenizer st = \cf2 new \cf4 StringTokenizer(br.readLine())\cf2 ;\
\
        
\f1\i \cf5 N 
\f0\i0 \cf4 = Integer.
\f1\i parseInt
\f0\i0 (st.nextToken())\cf2 ;\
        
\f1\i \cf5 input 
\f0\i0 \cf4 = \cf2 new int\cf4 [
\f1\i \cf5 N
\f0\i0 \cf4 ][\cf7 2\cf4 ]\cf2 ;\
\
        for\cf4 (\cf2 int \cf4 i = \cf7 0\cf2 ; \cf4 i < 
\f1\i \cf5 N
\f0\i0 \cf2 ; \cf4 i++)\{\
            st = \cf2 new \cf4 StringTokenizer(br.readLine())\cf2 ;\
            
\f1\i \cf5 input
\f0\i0 \cf4 [i][\cf7 0\cf4 ] = Integer.
\f1\i parseInt
\f0\i0 (st.nextToken())\cf2 ;\
            
\f1\i \cf5 input
\f0\i0 \cf4 [i][\cf7 1\cf4 ] = Integer.
\f1\i parseInt
\f0\i0 (st.nextToken())\cf2 ;\
        \cf4 \}\
\
        Arrays.
\f1\i sort
\f0\i0 (
\f1\i \cf5 input
\f0\i0 \cf2 , new \cf4 Comparator<\cf2 int\cf4 []>() \{\
            \cf8 @Override\
            \cf2 public int \cf6 compare\cf4 (\cf2 int\cf4 [] o1\cf2 , int\cf4 [] o2) \{\
                \cf2 if\cf4 (o1[\cf7 0\cf4 ] == o2[\cf7 0\cf4 ]) \cf2 return \cf4 o1[\cf7 1\cf4 ] - o2[\cf7 1\cf4 ]\cf2 ;\
                return \cf4 o1[\cf7 0\cf4 ] - o2[\cf7 0\cf4 ]\cf2 ;\
            \cf4 \}\
        \})\cf2 ;\
\
        \cf4 PriorityQueue<Integer> pq = \cf2 new \cf4 PriorityQueue<>()\cf2 ;\
        \cf4 pq.add(
\f1\i \cf5 input
\f0\i0 \cf4 [\cf7 0\cf4 ][\cf7 1\cf4 ])\cf2 ;\
\
        for\cf4 (\cf2 int \cf4 i = \cf7 1\cf2 ; \cf4 i < 
\f1\i \cf5 N
\f0\i0 \cf2 ; \cf4 i++)\{\
            \cf2 if\cf4 (pq.peek() <= 
\f1\i \cf5 input
\f0\i0 \cf4 [i][\cf7 0\cf4 ]) pq.poll()\cf2 ;\
            \cf4 pq.add(
\f1\i \cf5 input
\f0\i0 \cf4 [i][\cf7 1\cf4 ])\cf2 ;\
        \cf4 \}\
\
        System.
\f1\i \cf5 out
\f0\i0 \cf4 .println(pq.size())\cf2 ;\
    \cf4 \}\
\
\}\
}