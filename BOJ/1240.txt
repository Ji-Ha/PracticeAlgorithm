package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int N, M;
    static ArrayList<Node> nodes[];
    static boolean[] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        nodes = new ArrayList[N + 1];
        for(int i = 1; i <= N; i++)
            nodes[i] = new ArrayList<>();

        int u, v, d;
        for(int i = 0; i < N - 1; i++) {
            st = new StringTokenizer(br.readLine());
            u = Integer.parseInt(st.nextToken());
            v = Integer.parseInt(st.nextToken());
            d = Integer.parseInt(st.nextToken());

            nodes[u].add(new Node(v, d));
            nodes[v].add(new Node(u, d));
        }

        int s, e;
        for(int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            s = Integer.parseInt(st.nextToken());
            e = Integer.parseInt(st.nextToken());
            System.out.println(find(s, e));
        }
    }

    static int find(int start, int end) {
        visited = new boolean[N + 1];
        Queue<Node> q = new LinkedList<>();
        q.add(new Node(start, 0));
        visited[start] = true;

        while(!q.isEmpty()) {
            Node now = q.poll();

            if(now.next == end)
                return now.dist;

            for(Node node : nodes[now.next]) {
                if(!visited[node.next]) {
                    q.offer(new Node(node.next, now.dist + node.dist));
                    visited[node.next] = true;
                }
            }
        }
        return 0;
    }

    public static class Node {
        int next;
        int dist;

        public Node(int next, int dist) {
            this.next = next;
            this.dist = dist;
        }
    }
}
