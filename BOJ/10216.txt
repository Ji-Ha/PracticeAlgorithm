package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int N;
    static int[][] map;
    static boolean[] visited;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        int t = Integer.parseInt(br.readLine());

        while(t-- > 0) {
            int ans = 0;
            N = Integer.parseInt(br.readLine());
            map = new int[N + 1][4];
            visited = new boolean[N + 1];

            for(int i = 1; i <= N; i++) {
                st = new StringTokenizer(br.readLine());
                for(int j = 1; j <= 3; j++)
                    map[i][j] = Integer.parseInt(st.nextToken());
            }

            for(int i = 1; i <= N; i++) {
                if(visited[i]) continue;
                dfs(i);
                ans++;
            }
            
            System.out.println(ans);
        }
    }

    public static void dfs(int now) {
        if(visited[now]) return;
        visited[now] = true;
        for(int i = 1; i <= N; i++) {
            if(visited[i]) continue;
            double distance = Math.sqrt(Math.pow(map[now][1] - map[i][1], 2) + Math.pow(map[now][2] - map[i][2], 2));
            if(distance <= map[now][3] + map[i][3])
                dfs(i);
        }
    }
}
