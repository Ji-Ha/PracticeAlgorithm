package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int A, B;
    static String[] ans = new String[10001];
    static boolean[] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        int t = Integer.parseInt(br.readLine());

        while(t-- > 0) {
            st = new StringTokenizer(br.readLine());
            A = Integer.parseInt(st.nextToken());
            B = Integer.parseInt(st.nextToken());
            ans = new String[10001];
            Arrays.fill(ans, "");
            visited = new boolean[10001];
            System.out.println(BFS());
        }

    }

    public static String BFS() {
        Queue<Integer> q = new LinkedList<>();
        visited[A] = true;
        q.offer(A);

        while(!q.isEmpty() || !visited[B]) {
            int now = q.poll();
            int D = (now * 2) % 10000;
            int S = now == 0 ? 9999 : now - 1;
            int L = (now % 1000) * 10 + now/1000;
            int R = (now % 10) * 1000 + now/10;

            if(!visited[D]) {
                q.offer(D);
                visited[D] = true;
                ans[D] = ans[now] + "D";
            }
            if(!visited[S]) {
                q.offer(S);
                visited[S] = true;
                ans[S] = ans[now] + "S";
            }
            if(!visited[L]) {
                q.offer(L);
                visited[L] = true;
                ans[L] = ans[now] + "L";
            }
            if(!visited[R]) {
                q.offer(R);
                visited[R] = true;
                ans[R] = ans[now] + "R";
            }
        }
        return ans[B];
    }

}
