package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main{
    static int N, M, R, chicken_num, ans = Integer.MAX_VALUE;
    static ArrayList<location> chicken = new ArrayList<>();
    static ArrayList<location> home = new ArrayList<>();
    static boolean[] check;

    static class location{
        int x, y;

        location(int x, int y){
            this.x = x;
            this.y = y;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        int temp;
        for(int i = 0; i < N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; j++){
                temp = Integer.parseInt(st.nextToken());
                if(temp == 1) home.add(new location(i, j));
                if(temp == 2) chicken.add(new location(i, j));
            }
        }

        chicken_num = chicken.size();
        check = new boolean[chicken_num + 1];

        for(int i = M; i >= 1; i--){
            R = i;
            combi(0, 0);
        }

        System.out.println(ans);
    }

    static void combi(int s, int d){
        if(d == R){
            ans = Math.min(ans, getMin());
            return ;
        }

        for(int i = s; i < chicken_num; i++){
            check[i] = true;
            combi(i + 1, d + 1);
            check[i] = false;
        }
    }

    static int getMin(){
        int total = 0, temp;
        for(location l : home){
            temp = 2 * N;
            for(int i = 0; i < chicken_num; i++){
                if(!check[i]) continue;
                temp = Math.min(temp, calDir(l, chicken.get(i)));
            }
            total += temp;
            if(total > ans) return total;
        }
        return total;
    }

    static int calDir(location a, location b){
        return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
    }
}

