{\rtf1\ansi\ansicpg949\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red133\green96\blue154;\red86\green132\blue173;\red254\green187\blue91;\red88\green118\blue71;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c34510\c46275\c27843;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 package \cf4 coding_test\cf2 ;\
\
import \cf4 java.io.BufferedReader\cf2 ;\
import \cf4 java.io.IOException\cf2 ;\
import \cf4 java.io.InputStreamReader\cf2 ;\
import \cf4 java.util.LinkedList\cf2 ;\
import \cf4 java.util.Queue\cf2 ;\
import \cf4 java.util.StringTokenizer\cf2 ;\
\
public class \cf4 Main \{\
    \cf2 static int 
\f1\i \cf5 R
\f0\i0 \cf2 , 
\f1\i \cf5 C
\f0\i0 \cf2 ;\
    static char\cf4 [][] 
\f1\i \cf5 map
\f0\i0 \cf2 ;\
    static boolean\cf4 [][] 
\f1\i \cf5 goVisit
\f0\i0 \cf2 , 
\f1\i \cf5 waterVisit
\f0\i0 \cf2 ;\
    static \cf4 Queue<Pointer> 
\f1\i \cf5 waters
\f0\i0 \cf2 , 
\f1\i \cf5 gosudals
\f0\i0 \cf2 ;\
    static int\cf4 [] 
\f1\i \cf5 dx 
\f0\i0 \cf4 = \{\cf6 0\cf2 , \cf6 0\cf2 , \cf6 1\cf2 , \cf4 -\cf6 1\cf4 \}\cf2 ;\
    static int\cf4 [] 
\f1\i \cf5 dy 
\f0\i0 \cf4 = \{\cf6 1\cf2 , \cf4 -\cf6 1\cf2 , \cf6 0\cf2 , \cf6 0\cf4 \}\cf2 ;\
    static \cf4 Pointer 
\f1\i \cf5 fin
\f0\i0 \cf2 ;\
\
    public static void \cf7 main\cf4 (String[] args) \cf2 throws \cf4 IOException \{\
        BufferedReader br = \cf2 new \cf4 BufferedReader(\cf2 new \cf4 InputStreamReader(System.
\f1\i \cf5 in
\f0\i0 \cf4 ))\cf2 ;\
        \cf4 StringTokenizer st = \cf2 new \cf4 StringTokenizer(br.readLine())\cf2 ;\
\
        
\f1\i \cf5 R 
\f0\i0 \cf4 = Integer.
\f1\i parseInt
\f0\i0 (st.nextToken())\cf2 ;\
        
\f1\i \cf5 C 
\f0\i0 \cf4 = Integer.
\f1\i parseInt
\f0\i0 (st.nextToken())\cf2 ;\
        
\f1\i \cf5 map 
\f0\i0 \cf4 = \cf2 new char\cf4 [
\f1\i \cf5 R
\f0\i0 \cf4 ][
\f1\i \cf5 C
\f0\i0 \cf4 ]\cf2 ;\
        
\f1\i \cf5 goVisit 
\f0\i0 \cf4 = \cf2 new boolean\cf4 [
\f1\i \cf5 R
\f0\i0 \cf4 ][
\f1\i \cf5 C
\f0\i0 \cf4 ]\cf2 ;\
        
\f1\i \cf5 waterVisit 
\f0\i0 \cf4 = \cf2 new boolean\cf4 [
\f1\i \cf5 R
\f0\i0 \cf4 ][
\f1\i \cf5 C
\f0\i0 \cf4 ]\cf2 ;\
\
        
\f1\i \cf5 waters 
\f0\i0 \cf4 = \cf2 new \cf4 LinkedList<>()\cf2 ;\
        
\f1\i \cf5 gosudals 
\f0\i0 \cf4 = \cf2 new \cf4 LinkedList<>()\cf2 ;\
\
        for\cf4 (\cf2 int \cf4 i = \cf6 0\cf2 ; \cf4 i < 
\f1\i \cf5 R
\f0\i0 \cf2 ; \cf4 i++)\{\
            st = \cf2 new \cf4 StringTokenizer(br.readLine())\cf2 ;\
            
\f1\i \cf5 map
\f0\i0 \cf4 [i] = st.nextToken().toCharArray()\cf2 ;\
            for\cf4 (\cf2 int \cf4 j = \cf6 0\cf2 ; \cf4 j < 
\f1\i \cf5 C
\f0\i0 \cf2 ; \cf4 j++)\{\
                \cf2 if\cf4 (
\f1\i \cf5 map
\f0\i0 \cf4 [i][j] == \cf8 'D'\cf4 ) 
\f1\i \cf5 fin 
\f0\i0 \cf4 = \cf2 new \cf4 Pointer(i\cf2 , \cf4 j)\cf2 ;\
                if\cf4 (
\f1\i \cf5 map
\f0\i0 \cf4 [i][j] == \cf8 '*'\cf4 )\{\
                    
\f1\i \cf5 waters
\f0\i0 \cf4 .add(\cf2 new \cf4 Pointer(i\cf2 , \cf4 j))\cf2 ;\
                    
\f1\i \cf5 waterVisit
\f0\i0 \cf4 [i][j] = \cf2 true;\
                \cf4 \}\
                \cf2 if\cf4 (
\f1\i \cf5 map
\f0\i0 \cf4 [i][j] == \cf8 'S'\cf4 )\{\
                    
\f1\i \cf5 gosudals
\f0\i0 \cf4 .add(\cf2 new \cf4 Pointer(i\cf2 , \cf4 j))\cf2 ;\
                    
\f1\i \cf5 goVisit
\f0\i0 \cf4 [i][j] = \cf2 true;\
                \cf4 \}\
            \}\
        \}\
\
        \cf2 int \cf4 ans = 
\f1\i BFS
\f0\i0 ()\cf2 ;\
        \cf4 System.
\f1\i \cf5 out
\f0\i0 \cf4 .println(ans == \cf6 0 \cf4 ? \cf8 "KAKTUS" \cf4 : ans)\cf2 ;\
    \cf4 \}\
\
    \cf2 static int \cf7 BFS\cf4 ()\{\
        \cf2 int \cf4 count = \cf6 0\cf2 ;\
\
        while \cf4 (!
\f1\i \cf5 gosudals
\f0\i0 \cf4 .isEmpty())\{\
            
\f1\i waterUp
\f0\i0 ()\cf2 ;\
            \cf4 count++\cf2 ;\
\
            int \cf4 len = 
\f1\i \cf5 gosudals
\f0\i0 \cf4 .size()\cf2 ;\
            for\cf4 (\cf2 int \cf4 i = \cf6 0\cf2 ; \cf4 i < len\cf2 ; \cf4 i++)\{\
                Pointer gosudal = 
\f1\i \cf5 gosudals
\f0\i0 \cf4 .poll()\cf2 ;\
                for\cf4 (\cf2 int \cf4 j = \cf6 0\cf2 ; \cf4 j < \cf6 4\cf2 ; \cf4 j++)\{\
                    \cf2 int \cf4 nx = gosudal.\cf5 x \cf4 + 
\f1\i \cf5 dx
\f0\i0 \cf4 [j]\cf2 ;\
                    int \cf4 ny = gosudal.\cf5 y \cf4 + 
\f1\i \cf5 dy
\f0\i0 \cf4 [j]\cf2 ;\
\
                    if\cf4 (
\f1\i isValid
\f0\i0 (nx\cf2 , \cf4 ny))\{\
                        \cf2 if\cf4 (nx == 
\f1\i \cf5 fin
\f0\i0 \cf4 .\cf5 x \cf4 && ny == 
\f1\i \cf5 fin
\f0\i0 \cf4 .\cf5 y\cf4 ) \cf2 return \cf4 count\cf2 ;\
\
                        if\cf4 (
\f1\i \cf5 map
\f0\i0 \cf4 [nx][ny] == \cf8 '.' \cf4 && !
\f1\i \cf5 goVisit
\f0\i0 \cf4 [nx][ny])\{\
                            
\f1\i \cf5 goVisit
\f0\i0 \cf4 [nx][ny] = \cf2 true;\
                            
\f1\i \cf5 map
\f0\i0 \cf4 [nx][ny] = \cf8 'S'\cf2 ;\
                            
\f1\i \cf5 gosudals
\f0\i0 \cf4 .add(\cf2 new \cf4 Pointer(nx\cf2 , \cf4 ny))\cf2 ;\
                        \cf4 \}\
                    \}\
                \}\
            \}\
        \}\
        \cf2 return \cf6 0\cf2 ;\
    \cf4 \}\
\
    \cf2 static void \cf7 waterUp\cf4 ()\{\
        \cf2 int \cf4 len = 
\f1\i \cf5 waters
\f0\i0 \cf4 .size()\cf2 ;\
\
        for\cf4 (\cf2 int \cf4 i = \cf6 0\cf2 ; \cf4 i < len\cf2 ; \cf4 i++)\{\
            Pointer water = 
\f1\i \cf5 waters
\f0\i0 \cf4 .poll()\cf2 ;\
\
            for\cf4 (\cf2 int \cf4 j = \cf6 0\cf2 ; \cf4 j < \cf6 4\cf2 ; \cf4 j++)\{\
                \cf2 int \cf4 nx = water.\cf5 x \cf4 + 
\f1\i \cf5 dx
\f0\i0 \cf4 [j]\cf2 ;\
                int \cf4 ny = water.\cf5 y \cf4 + 
\f1\i \cf5 dy
\f0\i0 \cf4 [j]\cf2 ;\
\
                if\cf4 (
\f1\i isValid
\f0\i0 (nx\cf2 , \cf4 ny))\{\
                    \cf2 if\cf4 (
\f1\i \cf5 map
\f0\i0 \cf4 [nx][ny] != \cf8 'X' \cf4 && 
\f1\i \cf5 map
\f0\i0 \cf4 [nx][ny] != \cf8 'D' \cf4 && !
\f1\i \cf5 waterVisit
\f0\i0 \cf4 [nx][ny])\{\
                        
\f1\i \cf5 map
\f0\i0 \cf4 [nx][ny] = \cf8 '*'\cf2 ;\
                        
\f1\i \cf5 waters
\f0\i0 \cf4 .add(\cf2 new \cf4 Pointer(nx\cf2 , \cf4 ny))\cf2 ;\
                        
\f1\i \cf5 waterVisit
\f0\i0 \cf4 [nx][ny] = \cf2 true;\
                    \cf4 \}\
                \}\
            \}\
        \}\
    \}\
\
    \cf2 static boolean \cf7 isValid\cf4 (\cf2 int \cf4 x\cf2 , int \cf4 y)\{\
        \cf2 if\cf4 (x < \cf6 0 \cf4 || x >= 
\f1\i \cf5 R 
\f0\i0 \cf4 || y < \cf6 0 \cf4 || y >= 
\f1\i \cf5 C
\f0\i0 \cf4 ) \cf2 return false;\
        return true;\
    \cf4 \}\
\
    \cf2 static class \cf4 Pointer\{\
        \cf2 int \cf5 x\cf2 ;\
        int \cf5 y\cf2 ;\
        \cf7 Pointer\cf4 (\cf2 int \cf4 x\cf2 , int \cf4 y)\{\
            \cf2 this\cf4 .\cf5 x \cf4 = x\cf2 ;\
            this\cf4 .\cf5 y \cf4 = y\cf2 ;\
        \cf4 \}\
    \}\
\}\
}