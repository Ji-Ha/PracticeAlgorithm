package coding_test;

import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int N, M, count, min = Integer.MAX_VALUE;
    static int[][] board;
    static int[][] visited;
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};

    static ArrayList<Point> virus = new ArrayList<>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        board = new int[N][N];
        count = N * N;
        for(int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; j++) {
                board[i][j] = Integer.parseInt(st.nextToken());
                if(board[i][j] == 1) count--;
                if(board[i][j] == 2) {
                    virus.add(new Point(i, j));
                    count--;
                }
            }
        }
        if(count == 0) { // 빈 칸이 없으면 퍼뜨릴 곳도 없음
            System.out.println(0);
        } else {
            DFS(0, 0);
            System.out.println(min != Integer.MAX_VALUE ? min : -1);
        }


    }

    static void DFS(int depth, int start) {
        if(depth == M) {
            BFS();
            return;
        }
        for(int i = start; i < virus.size(); i++) {
            Point now = virus.get(i);
            board[now.x][now.y] = 3;
            DFS(depth + 1, i + 1);
            board[now.x][now.y] = 2;
        }
    }

    static void BFS() {
        Queue<Point> q = new LinkedList<>();
        visited = new int[N][N];
        int[][] copyMap = new int[N][N];
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                copyMap[i][j] = board[i][j];

                if(copyMap[i][j] == 3) {
                    q.add(new Point(i, j));
                    visited[i][j] = 1;
                }
            }
        }

        int cnt = 0;
        while(!q.isEmpty()) {
            Point now = q.poll();

            for(int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];

                if(nx < 0 || ny < 0 || nx >= N || ny >= N || copyMap[nx][ny] == 1) continue;

                if(visited[nx][ny] == 0) {
                    visited[nx][ny] = visited[now.x][now.y] + 1;
                    q.add(new Point(nx, ny));
                    if(copyMap[nx][ny] == 0)
                        cnt++;
                    if(cnt == count)
                        min = Math.min(min, visited[nx][ny] - 1);

                }
            }
        }
    }
}
