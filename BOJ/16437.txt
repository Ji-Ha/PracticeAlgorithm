package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int N;
    static char[] types;
    static int[] animals;
    static ArrayList<Integer>[] tree;
    static ArrayList<Integer>[] map;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());
        types = new char[N+1];
        animals = new int[N+1];
        tree = new ArrayList[N+1];
        map = new ArrayList[N+1];

        for(int i = 1; i <= N; i++) {
            map[i] = new ArrayList<>();
            tree[i] = new ArrayList<>();
        }

        for(int i = 2; i <= N; i++) {
            st = new StringTokenizer(br.readLine());
            char t = st.nextToken().charAt(0);
            int a = Integer.parseInt(st.nextToken());
            int p = Integer.parseInt(st.nextToken());

            types[i] = t;
            animals[i] = a;
            map[i].add(p);
            map[p].add(i);
        }
        makeTree();
        System.out.println(count(1));
    }

    public static long count(int index) {
        long res = 0;
        for(int next : tree[index])
            res += count(next);

        if(types[index] == 'S')
            return res += animals[index];

        return res = Math.max(res - animals[index], 0);
    }

    public static void makeTree() {
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[N + 1];
        visited[1] = true;
        q.offer(1);

        while(!q.isEmpty()) {
            int now = q.poll();

            for(int next : map[now]) {
                if(!visited[next]) {
                    visited[next] = true;
                    tree[now].add(next);
                    q.offer(next);
                }
            }
        }
    }
}

