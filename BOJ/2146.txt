package coding_test;

import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int N, ans = Integer.MAX_VALUE;
    static int[][] map;
    static boolean[][] visited;
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());
        map = new int[N][N];
        visited = new boolean[N][N];

        for(int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }

        int mapper = 1;
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                if(!visited[i][j] && map[i][j] != 0)
                    BFS(i, j, mapper++);
            }
        }

        for(int i = 0; i < N; i++) {
            for(int j = 0;j < N; j++) {
                visited = new boolean[N][N];
                if(map[i][j] >= 1)
                    buildBridge(i, j, map[i][j]);
            }
        }

        System.out.println(ans);
    }

    public static void BFS(int x, int y, int number) {
        Queue<Point> q = new LinkedList<>();
        q.offer(new Point(x, y));
        map[x][y] = number;
        visited[x][y] = true;

        while(!q.isEmpty()) {
            Point now = q.poll();
            for(int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];

                if(nx < 0 || ny < 0 || nx >= N || ny >= N) continue;
                if(!visited[nx][ny] && map[nx][ny] == 1) {
                    map[nx][ny] = number;
                    visited[nx][ny] = true;
                    q.offer(new Point(nx, ny));
                }
            }
        }
    }

    public static void buildBridge(int x, int y, int mapNumber) {
        Queue<navi> q = new LinkedList<>();
        q.offer(new navi(x, y, 0));
        visited[x][y] = true;

        while(!q.isEmpty()) {
            navi now = q.poll();

            for(int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];

                if(nx < 0 || ny < 0 || nx >= N || ny >= N) continue;
                if(!visited[nx][ny]) {
                    visited[nx][ny] = true;
                    if(map[nx][ny] == 0)
                        q.offer(new navi(nx, ny, now.dist + 1));
                    else if(map[nx][ny] == mapNumber)
                        q.offer(new navi(nx, ny, now.dist));
                    else
                        ans = Math.min(ans, now.dist);
                }
            }
        }
    }

    static class navi {
        int x;
        int y;
        int dist;

        public navi(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }
}
