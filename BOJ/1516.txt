package coding_test;
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
 
public class Main {
    static int N;
    static int[] build;
    static ArrayList<Queue<Integer>> routine = new ArrayList<>();
 
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
 
        N = Integer.parseInt(br.readLine());
        build = new int[N];
 
        for(int i = 0; i < N; i++){
            st = new StringTokenizer(br.readLine());
            Queue <Integer> q = new LinkedList<>();
 
            while(true){
                int temp = Integer.parseInt(st.nextToken());
                if(temp == -1) break;
                q.add(temp);
            }
            routine.add(q);
        }
 
        int k = 0;
        for(Queue<Integer> r : routine){
            build[k] = r.poll();
            k++;
        }
 
        for(int j = 0; j < N; j++){
            pathBuild(j);
            System.out.println(build[j]);
        }
    }
 
    static void pathBuild(int num){
        Queue<Integer> q = routine.get(num);
        if(q.isEmpty()) return;
        int res = 0;
        int temp;
 
        while(!q.isEmpty()){
            temp = q.poll();
            pathBuild(temp - 1);
            res = Math.max(res, build[temp - 1]);
        }
        build[num] += res;
    }
}
