package coding_test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Pointer{
    int x, y;

    Pointer(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Main {
    static int W, H, cheese = 0, time = 0, ans = 0;
    static int[][] board;
    static boolean[][] visited;
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        W = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());
        board = new int[W][H];

        for(int i = 0; i < W; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < H; j++) {
                board[i][j] = Integer.parseInt(st.nextToken());
                if(board[i][j] == 1)
                    cheese++;
            }
        }

        while(cheese != 0) {
            visited = new boolean[W][H];
            ans = cheese;
            time++;
            BFS();
        }

        System.out.println(time);
        System.out.println(ans);
    }

    public static void BFS() {
        Queue<Pointer> q = new LinkedList<>();
        q.offer(new Pointer(0, 0 ));
        visited[0][0] = true;

        while(!q.isEmpty()) {
            Pointer now = q.poll();

            for(int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];

                if(nx >= 0 && ny >= 0 && nx < W && ny < H && !visited[nx][ny]) {
                    if(board[nx][ny] == 1) {
                        cheese--;
                        board[nx][ny] = 0;
                    }
                    else {
                        q.offer(new Pointer(nx, ny));
                    }
                    visited[nx][ny] = true;
                }
            }
        }
    }
}
